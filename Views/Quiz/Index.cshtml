@using exam_proctor_system.Models.DTos.ResponseModel
@model BaseResponse<QuizModel>
@section PageHead {
    <link rel="canonical" href="student-quiz-start.html" />
    <link rel="stylesheet" href="~/assets/libs/bs-stepper/dist/css/bs-stepper.min.css" />
}

<div class="db-content" style="margin-left: 5px;">
    <div class="container mb-4">
        <div class="row mb-6">
            <div class="col-12">
                <div class="d-flex flex-row align-items-center justify-content-between">
                    <h1 class="h2 mb-0">Quizzes</h1>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="d-flex flex-row align-items-center justify-content-between mb-4">
                    <h2 class="mb-0">@Model.Data.ExamName</h2>
                    <a href="student-quiz-start.html#!" class="btn btn-dark">Stop Quiz</a>
                </div>
                <div id="courseForm" class="bs-stepper">
                    <!-- Stepper Button -->
                    <!-- Stepper content -->
                    <div class="bs-stepper-content">
                        <div role="tablist">
                            @for (int i = 0; i < Model.Data.Questions.Count(); i++)
                            {
                                <div class="step" data-target="#test-l-@(i + 1)">
                                    <button type="button" class="step-trigger visually-hidden" role="tab" id="courseFormtrigger@(i + 1)" aria-controls="test-l-@(i + 1)"></button>
                                </div>
                            }
                        </div>
                        <form onSubmit="return false">
                            @foreach (var question in Model.Data.Questions.Select((value, index) => new { value, index }))
                            {
                                <div id="test-l-@(question.index + 1)" role="tabpanel" class="bs-stepper-pane fade">
                                    <div class="card">
                                        <div class="card-body d-flex flex-column gap-5">
                                            <!-- Quiz Header -->
                                            <div class="d-flex flex-md-row flex-column justify-content-between align-items-md-center gap-1 gap-md-0">
                                                <h3 class="mb-0"><a href="student-quiz-start.html#" class="text-inherit">@Model.Data.ExamName</a></h3>
                                                <div>
                                                    <span class="text-danger">
                                                        <i class="fe fe-clock me-1 align-middle"></i>
                                                        <span id="timer">00:00:00</span>
                                                    </span>
                                                </div>
                                            </div>
                                            <!-- Progress Bar -->
                                            <div class="d-flex flex-column gap-2">
                                                <div class="d-flex justify-content-between">
                                                    <span>Exam Progress:</span>
                                                    <span>Question @(question.index + 1) out of @Model.Data.Questions.Count()</span>
                                                </div>
                                                <div class="progress" style="height: 6px">
                                                    <div class="progress-bar bg-success" role="progressbar" style="width: @((question.index + 1) * 100 / Model.Data.Questions.Count())%" aria-valuenow="@((question.index + 1) * 100 / Model.Data.Questions.Count())" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                            </div>
                                            <!-- Question and Options -->
                                            <div class="d-flex flex-column gap-4">
                                                <div class="d-flex flex-column gap-1">
                                                    <span class="fw-semibold text-secondary">Question @(question.index + 1)</span>
                                                    <h3 class="mb-0">@question.value.QuestionText</h3>
                                                </div>
                                                <div class="d-flex flex-column gap-4">
                                                    <div class="list-group">
                                                        @foreach (var option in question.value.Options)
                                                        {
                                                            <div class="list-group-item list-group-item-action">
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="radio" name="question@(question.index + 1)" id="option@(option.Id)" value="@option.Id" />
                                                                    <label class="form-check-label stretched-link" for="option@(option.Id)">@option.OptionText</label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                    <!-- Navigation Buttons -->
                                                    <div class="d-flex justify-content-between">
                                                        @if (question.index > 0)
                                                        {
                                                            <button class="btn btn-secondary" onclick="courseForm.previous()">
                                                                <i class="fe fe-arrow-left"></i>
                                                                Previous
                                                            </button>
                                                        }
                                                        @if (question.index < Model.Data.Questions.Count() - 1)
                                                        {
                                                            <button class="btn btn-primary" onclick="courseForm.next()">
                                                                Next
                                                                <i class="fe fe-arrow-right"></i>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button type="submit" class="btn btn-primary" onclick="location.href='student-quiz-result.html'">Finish</button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/assets/libs/bs-stepper/dist/js/bs-stepper.min.js"></script>
    <script src="~/assets/js/vendors/beStepper.js"></script>
    <script src="~/assets/js/vendors/navbar-nav.js"></script>
    <script>
        // Timer Logic
        const durationInMinutes = @Model.Data.Duration;
        let timeLeft = durationInMinutes * 60; // Convert minutes to seconds
        const timerElement = document.getElementById('timer');

        function updateTimer() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                alert('Time is up!');
                window.location.href = 'student-quiz-result.html'; // Redirect to results page
            } else {
                timeLeft--;
            }
        }

        const timerInterval = setInterval(updateTimer, 1000);
    </script>
}