@using exam_proctor_system.Models.DTos.ResponseModel
@inject IHttpContextAccessor HttpContextAccessor
@model BaseResponse<QuizModel>
@{
    int num = 0;
    string candidateId = HttpContextAccessor.HttpContext.Session.GetString("UserId");
}
@section PageHead {
    <link rel="canonical" href="student-quiz-start.html" />
    <link rel="stylesheet" href="~/assets/libs/bs-stepper/dist/css/bs-stepper.min.css" />
    <style>
        body {
            overflow: hidden;
            margin: 0;
            padding: 0;
        }

        #camera-container {
            position: fixed;
            top: 10px;
            right: 10px;
            width: 200px;
            z-index: 1000;
            border: 2px solid red;
            border-radius: 5px;
            background: black;
        }

        #camera-feed {
            width: 100%;
            height: auto;
        }

        #fullscreen-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: white;
            z-index: 9998;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
        }

        .exit-warning {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            color: white;
            z-index: 9999;
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
        }
    </style>
}

<div class="db-content" style="margin-left: 5px;">
    <div class="container mb-4">
        <div class="row mb-6">
            <div class="col-12">
                <div class="d-flex flex-row align-items-center justify-content-between">
                    <h1 class="h2 mb-0">Quizzes</h1>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="d-flex flex-row align-items-center justify-content-between mb-4">
                    <h2 class="mb-0">@Model.Data.ExamName</h2>

                    <p class="btn btn-dark"><span id="timer">00:00:00</span></p>
                </div>
                <div id="courseForm" class="bs-stepper">
                    <!-- Stepper Button -->
                    <!-- Stepper content -->
                    <div class="bs-stepper-content">
                        <div role="tablist">
                            @for (int i = 1; i <= Model.Data.Questions.Count(); i++)
                            {
                                <div class="step" data-target="#test-l-@i">
                                    <div class="step-trigger visually-hidden" role="tab" id="courseFormtrigger@(i)" aria-controls="test-l-@i"></div>
                                </div>
                            }

                        </div>
                        <form asp-action="Result">
                            <input type="hidden" name="ExamId" value="@Model.Data.ExamId" />
                            @for (int i = 0; i < Model.Data.Questions.Count(); i++)
                            {

                                <div id="test-l-@(i+1)" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="courseFormtrigger@(i+1)">
                                    <div class="card">
                                        <!-- Card body -->
                                        <div class="card-body d-flex flex-column gap-5">
                                            <!-- quiz -->
                                            <div class="d-flex flex-md-row flex-column justify-content-between align-items-md-center gap-1 gap-md-0">
                                                <h3 class="mb-0"><a href="student-quiz-start.html#" class="text-inherit">@Model.Data.ExamName</a></h3>
                                                <div>
                                                    @* <span class="text-danger"> *@
                                                    @*     <i class="fe fe-clock me-1 align-middle"></i> *@
                                                    @*     <span id="timer">00:00:00</span> *@

                                                    @* </span> *@
                                                </div>
                                            </div>
                                            <div class="d-flex flex-column gap-2">
                                                <!-- text -->
                                                <div class="d-flex justify-content-between">
                                                    <span>Exam Progress:</span>
                                                    <span>Question @(i + 1) out of @Model.Data.Questions.Count()</span>
                                                </div>
                                                <!-- progress bar -->
                                                <div class="">
                                                    <div class="progress" style="height: 6px">
                                                        <div class="progress-bar bg-success" role="progressbar" style="width: @((i + 1) * 100 / Model.Data.Questions.Count())%" aria-valuenow="@((i + 1) * 100 / Model.Data.Questions.Count())" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>

                                                </div>
                                            </div>
                                            <!-- text -->
                                            <div class="d-flex flex-column gap-4">
                                                <div class="d-flex flex-column gap-1">
                                                    <span class="fw-semibold text-secondary">Question @(i + 1)</span>
                                                    <h3 class="mb-0">@Model.Data.Questions[i].QuestionText</h3>
                                                </div>
                                                <div class="d-flex flex-column gap-4">
                                                    <!-- list group -->
                                                    <div class="list-group">
                                                        @for (int j = 0; j < Model.Data.Questions[i].Options.Count; j++)
                                                        {
                                                            num = num + 1;
                                                            <div class="list-group-item list-group-item-action" aria-current="true">
                                                                <!-- form check -->
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="radio" name="SelectedOptions[@i].OptionId" id="flexRadioDefault@(num)" value="@Model.Data.Questions[i].Options[j].Id" />
                                                                    <label class="form-check-label stretched-link" for="flexRadioDefault@(num)">@Model.Data.Questions[i].Options[j].OptionText</label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                    <!-- Button -->
                                                    <div class="d-flex justify-content-between">
                                                        @if (i != 0)
                                                        {
                                                            <button type="button" class="btn btn-secondary" onclick="courseForm.previous()">
                                                                <i class="fe fe-arrow-left"></i>
                                                                Previous
                                                            </button>
                                                        }

                                                        @if (i == Model.Data.Questions.Count - 1)
                                                        {
                                                            <button type="submit" class="btn btn-primary">Finish</button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-primary" onclick="courseForm.next()">
                                                                Next
                                                                <i class="fe fe-arrow-right"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            }
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="camera-container">
    <video id="camera-feed" autoplay playsinline></video>
</div>

<div id="fullscreen-overlay">
    <h2>Exam Instructions</h2>
    <p>This exam will run in full-screen mode with camera monitoring.</p>
    <p>You cannot exit until you complete the exam.</p>
    <p>Please allow camera access when prompted.</p>
    <button id="start-exam-btn" class="btn btn-primary">Start Exam</button>
</div>

<div id="exit-warning" class="exit-warning">
    <h2>Warning!</h2>
    <p>You are not allowed to exit the exam before completion.</p>
    <p>Any attempt to exit may result in exam disqualification.</p>
    <button id="return-to-exam" class="btn btn-primary">Return to Exam</button>
</div>

@section Scripts {
    <script src="~/assets/libs/bs-stepper/dist/js/bs-stepper.min.js"></script>
    <script src="~/assets/js/vendors/beStepper.js"></script>
    <script src="~/assets/js/vendors/navbar-nav.js"></script>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startBtn = document.getElementById('start-exam-btn');
            const fullscreenOverlay = document.getElementById('fullscreen-overlay');
            let localStream;

            startBtn.addEventListener('click', async function() {
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        video: true,
                        audio: false
                    });

                    document.getElementById('camera-feed').srcObject = localStream;
                    await initializeWebRTC(localStream);
                    fullscreenOverlay.style.display = 'none';
                    startTimer();
                    setupExitDetection();
                } catch (err) {
                    alert('Exam initialization failed: ' + err.message);
                }
            });

            async function initializeWebRTC(stream) {
                try {
                    const signalRConnection = new signalR.HubConnectionBuilder()
                        .withUrl('/streamingHub')
                        .configureLogging(signalR.LogLevel.Information)
                        .build();
                    const pc = new RTCPeerConnection({
                        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
                    });

                    signalRConnection.onclose(async () => {
                        console.log('Reconnecting...');
                        await startConnection();
                    });
                    let isRemoteDescriptionSet = false;
                    const pendingCandidates = [];
                    signalRConnection.on("ReceiveAnswer", async answer => {
                        console.log("ReceiveAnswer", answer);
                        try {
                            await pc.setRemoteDescription(answer);
                            console.log('Answer received and processed');
                            isRemoteDescriptionSet = true;

                            // Now add all queued candidates
                            pendingCandidates.forEach(c => pc.addIceCandidate(c)
                                .catch(err => console.error('Add ICE candidate error (queued):', err)));
                        } catch (err) {
                            console.error('Error setting remote description:', err);
                        }
                    });


                    signalRConnection.on("ReceiveIceCandidate", candidateInit => {
                        try {
                            const iceCandidate = new RTCIceCandidate({
                                candidate: candidateInit.candidate,
                                sdpMid: candidateInit.sdpMid,
                                sdpMLineIndex: candidateInit.sdpMLineIndex
                            });
                                            console.log("Checking isRemoteDescriptionSet", isRemoteDescriptionSet)

                            if (isRemoteDescriptionSet) {
                                pc.addIceCandidate(iceCandidate)
                                    .catch(err => console.error('Add ICE candidate error:', err));
                            } else {
                                pendingCandidates.push(iceCandidate);
                            }
                        } catch (err) {
                            console.error('Error creating ICE candidate:', err);
                            console.log('Problematic candidate data:', candidateInit);
                        }
                    });



                    async function startConnection() {
                        try {
                                    await signalRConnection.start()
                                            await signalRConnection.invoke("RegisterCandidate", "@candidateId", "@Model.Data.ExamId.ToString()");
                            console.log("SignalR Connected.");
                        } catch (err) {
                            console.log(err);
                            setTimeout(startConnection, 5000);
                        }
                    }

                    await startConnection();

                   

                    stream.getTracks().forEach(track => {
                        pc.addTrack(track, stream);
                        console.log('Added track:', track.kind);
                    });

                    pc.onicecandidate = e => {
                        if (e.candidate) {
                            const candidateData = {
                                candidate: e.candidate.candidate,
                                sdpMid: e.candidate.sdpMid || null,
                                sdpMLineIndex: e.candidate.sdpMLineIndex
                            };
                            
                            signalRConnection.invoke("SendIceCandidate", "@candidateId", candidateData)
                                .catch(err => console.error('Send ICE candidate error:', err));
                        }
                    };

                    pc.oniceconnectionstatechange = () => {
                        console.log('ICE connection state:', pc.iceConnectionState);
                    };

                    const offer = await pc.createOffer();
                    await pc.setLocalDescription(offer);
                    await signalRConnection.invoke("SendOffer", "@candidateId", offer);

                    
                } catch (err) {
                    console.error('WebRTC initialization failed:', err);
                    alert('WebRTC initialization error: ' + err.message);
                }
            }

            function startTimer() {
    const durationInMinutes = @Model.Data.Duration;
    let timeLeft = durationInMinutes * 60;
    const timerElement = document.getElementById('timer');

    function updateTimer() {
        const hours = Math.floor(timeLeft / 3600);
        const minutes = Math.floor((timeLeft % 3600) / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            alert('Time is up!');
            document.querySelector('form').submit();
        } else {
            timeLeft--;
        }
    }

    const timerInterval = setInterval(updateTimer, 1000);
    updateTimer();
}

        // Replace your existing setupExitDetection() function with this:
        function setupExitDetection() {
            // First enter fullscreen mode
            async function enterFullscreen() {
                try {
                    if (!document.fullscreenElement) {
                        await document.documentElement.requestFullscreen();
                    }
                } catch (err) {
                    console.error("Fullscreen error:", err);
                }
            }

            // Handle return to exam button
            document.getElementById('return-to-exam').addEventListener('click', async () => {
                try {
                    await enterFullscreen();
                    document.getElementById('exit-warning').style.display = 'none';
                } catch (err) {
                    console.error("Failed to return to fullscreen:", err);
                }
            });

            // Monitor fullscreen changes
            document.addEventListener('fullscreenchange', () => {
                if (!document.fullscreenElement) {
                    document.getElementById('exit-warning').style.display = 'flex';
                    enterFullscreen().catch(console.error);
                }
            });

            // Monitor tab/window switches
            window.addEventListener('blur', () => {
                document.getElementById('exit-warning').style.display = 'flex';
            });

            // Prevent context menu
            document.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                return false;
            });

            // Block keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                // Block F5, Ctrl+R, Ctrl+Shift+R, etc.
                if (e.key === 'F5' || e.key === 'F11' ||
                    (e.ctrlKey && e.key === 'r') ||
                    (e.metaKey && e.key === 'r') ||
                    (e.ctrlKey && e.shiftKey && e.key === 'r')) {
                    e.preventDefault();
                }

                // Block Alt+Tab, Ctrl+Tab, etc.
                if (e.altKey || e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                }
            });

            // Prevent drag/drop
            document.addEventListener('drop', (e) => {
                e.preventDefault();
            });
            document.addEventListener('dragover', (e) => {
                e.preventDefault();
            });

            // Start in fullscreen
            enterFullscreen();
        }
  



});
    </script>

}



