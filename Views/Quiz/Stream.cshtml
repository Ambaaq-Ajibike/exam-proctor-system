@section PageHead {
    <style>
        #adminGrid video {
            border: 4px solid lime;
        }
    </style>
}


<div class="container p-4">
    <h2>Live Candidate Streams</h2>
    <div id="adminGrid" class="grid grid-cols-3 gap-4 mt-4">
        <video id="camera-feed" autoplay playsinline></video>
    </div>
</div>


<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
      (async () => {
          
        const connection = new signalR.HubConnectionBuilder()
          .withUrl('/streamingHub')
          .build();
        await connection.start();

        const peerConnections = {};
        const adminGrid = document.getElementById('adminGrid');

        connection.on('ReceiveOffer', async (candidateId, offer) => {
          if (peerConnections[candidateId]) return;
          const pc = new RTCPeerConnection({
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
          });
          peerConnections[candidateId] = pc;

          // 🔑 Explicitly ask to receive video
          // pc.addTransceiver('video', { direction: 'recvonly' });

          // When the remote track arrives, attach it

          pc.ontrack = e => {
            console.log(e.streams, "streeeeeeeeeeeeeeeeeeeeeeeeee")
              attachStream(candidateId, e.streams[0])
          };

          // Send our ICE candidates back
          pc.onicecandidate = e => {
            if (e.candidate) {
              connection.invoke('SendIceCandidate', candidateId, e.candidate.toJSON());
            }
          };

          // Negotiate
          await pc.setRemoteDescription(offer);
          const answer = await pc.createAnswer();
          await pc.setLocalDescription(answer);
          connection.invoke('SendAnswer', candidateId, answer);
        });

        connection.on('ReceiveIceCandidate', (candidateId, candidateInit) => {
          const pc = peerConnections[candidateId];
          if (pc) pc.addIceCandidate(new RTCIceCandidate(candidateInit)).catch(console.error);
        });

        function attachStream(id, stream) {
          let vid = document.getElementById("camera-feed");
         
           console.log(vid, stream)
          vid.srcObject = stream;
        }
      })();
    });
</script>


