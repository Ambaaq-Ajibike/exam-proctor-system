@section PageHead {
    <style>
        #adminGrid video {
            border: 4px solid lime;
        }
    </style>
}


<div class="container p-4">
    <h2>Live Candidate Streams</h2>
    <div id="adminGrid" class="grid grid-cols-3 gap-4 mt-4">
    </div>
</div>

<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
      (async () => {
        const connection = new signalR.HubConnectionBuilder()
          .withUrl('/streamingHub')
          .build();
        await connection.start();

        const peerConnections = {};
        const adminGrid = document.getElementById('adminGrid');

        connection.on('ReceiveOffer', async (candidateId, offer) => {
          if (peerConnections[candidateId]) return;
          const pc = new RTCPeerConnection({
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
          });
          peerConnections[candidateId] = pc;

          // Ask to receive video
          pc.addTransceiver('video', { direction: 'recvonly' });

          // When the remote track arrives:
          pc.ontrack = e => {
            const stream = e.streams[0];
            attachStream(candidateId, stream);
          };

          // ICE candidates back to candidate
          pc.onicecandidate = e => {
            if (e.candidate) {
              connection.invoke('SendIceCandidate',
                                 candidateId,
                                 e.candidate.toJSON());
            }
          };

          // Negotiate offer/answer
          await pc.setRemoteDescription(offer);
          const answer = await pc.createAnswer();
          await pc.setLocalDescription(answer);
          await connection.invoke('SendAnswer', candidateId, answer);
        });

        // Handle incoming ICE
        connection.on('ReceiveIceCandidate', (candidateId, init) => {
          const pc = peerConnections[candidateId];
          if (pc) {
            pc.addIceCandidate(new RTCIceCandidate(init))
              .catch(console.error);
          }
        });

        // Create a unique <video> per candidate and attach stream
        function attachStream(id, stream) {
            console.log(stream.getVideoTracks());
          const vidId = `video-${id}`;
          let video = document.getElementById(vidId);
          if (!video) {
            video = document.createElement('video');
            video.id        = vidId;
            video.autoplay  = true;
            video.playsInline = true;
            video.muted     = true;               // required for autoplay :contentReference[oaicite:8]{index=8}
            video.style.width  = '320px';         // ensure visible size :contentReference[oaicite:9]{index=9}
            video.style.height = '240px';
            adminGrid.appendChild(video);
          }
          console.log('Attaching stream', stream.id, 'to', vidId);
          video.srcObject = stream;               // bind the live MediaStream :contentReference[oaicite:10]{index=10}
        }
      })();
    });
</script>

