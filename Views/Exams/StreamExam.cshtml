@section PageHead {
    <style>
        #adminGrid video {
            border: 4px solid lime;
        }
    </style>
}


<div class="container p-4">
    <h2>Live Candidate Streams</h2>
    <div id="adminGrid" class="grid grid-cols-3 gap-4 mt-4">
    </div>
</div>


@section Scripts {
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const examId = '@Model.ToString()';
            (async () => {
                try {
                    const connection = new signalR.HubConnectionBuilder()
                        .withUrl('/streamingHub')
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    connection.onclose(async () => {
                        console.log('Connection closed. Attempting to reconnect...');
                        await startConnection();
                    });

                    async function startConnection() {
                        try {
                            await connection.start();
                            await connection.invoke("JoinExamAdminGroup", examId);
                            console.log("SignalR Connected.");
                        } catch (err) {
                            console.log(err);
                            setTimeout(startConnection, 5000);
                        }
                    }

                    await startConnection();

                    const peerConnections = {};
                    const adminGrid = document.getElementById('adminGrid');

                    connection.on("ReceiveOffer", async (candidateId, offer) => {
                        console.log(`Received offer from ${candidateId}`);
                        if (peerConnections[candidateId]) return;

                        const pc = new RTCPeerConnection({
                            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
                        });
                        peerConnections[candidateId] = pc;

                        pc.addTransceiver('video', { direction: 'recvonly' });

                        pc.ontrack = e => {
                            console.log('Received track:', e.track.kind);
                            if (e.streams && e.streams.length > 0) {
                                attachStream(candidateId, e.streams[0]);    
                            }
                        };

                        pc.onicecandidate = e => {
                            if (e.candidate) {
                                connection.invoke("SendIceCandidate", candidateId, {
                                    candidate: e.candidate.candidate,
                                    sdpMid: e.candidate.sdpMid,
                                    sdpMLineIndex: e.candidate.sdpMLineIndex
                                }).catch(err => console.error('Error sending ICE candidate:', err));
                            }
                        };

                        try {
                            await pc.setRemoteDescription(offer);
                            const answer = await pc.createAnswer();
                            await pc.setLocalDescription(answer);
                            console.log("Sending answer.......", answer, candidateId)
                            await connection.invoke("SendAnswer", candidateId, answer);
                        } catch (err) {
                            console.error('Error handling offer:', err);
                        }
                    });

                    connection.on("ReceiveIceCandidate", (candidateData, candidateId) => {
                        const pc = peerConnections[candidateId];
                        console.log("Receive IC on  pc", pc)
                        if (!pc) return;

                        try {
                            const iceCandidate = new RTCIceCandidate({
                                candidate: candidateData.candidate,
                                sdpMid: candidateData.sdpMid,
                                sdpMLineIndex: candidateData.sdpMLineIndex
                            });
                            pc.addIceCandidate(iceCandidate)
                                .catch(err => console.error('Add ICE candidate error:', err));
                        } catch (err) {
                            console.error('Error creating ICE candidate:', err);
                            console.log('Problematic candidate data:', candidateData);
                        }
                    });

                    function attachStream(candidateId, stream) {
                        console.log(stream.getVideoTracks(), "getVideoTracks");
                        const video = document.createElement('video');
                        video.autoplay = true;
                        video.playsInline = true;
                        video.srcObject = stream;
                        video.muted = true;
                        console.log(stream);
                        const container = document.createElement('div');
                        container.className = 'stream-container';
                        container.innerHTML = `<p>Candidate: ${candidateId}</p>`;
                        container.appendChild(video);
                        
                        adminGrid.appendChild(container);
                        video.onloadedmetadata = () => {
                          video.play().catch(err => console.error("Video play error:", err));
                        };

                    }

                } catch (err) {
                    console.error('Initialization error:', err);
                }
            })();
        });
    </script>

}