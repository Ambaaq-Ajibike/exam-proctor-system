@section PageHead {
    <style>
        #adminGrid video {
            border: 4px solid lime;
            width: 100%; /* Make video fill its container */
            height: auto; /* Maintain aspect ratio */
            background: #000; /* Black background for letterboxing */
        }

        .stream-container {
            margin-bottom: 20px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .candidate-label {
            font-weight: bold;
            margin-bottom: 5px;
        }
    </style>
}

<div class="container p-4">
    <h2>Live Candidate Streams</h2>
    <div id="adminGrid" class="row">
        <!-- Videos will be inserted here in 3-column layout -->
    </div>
</div>


@section Scripts {
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@3.18.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow-models/blazeface@0.0.7/dist/blazeface.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const examId = '@Model.ToString()';
            (async () => {
                try {
                    const connection = new signalR.HubConnectionBuilder()
                        .withUrl('/streamingHub')
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    connection.onclose(async () => {
                        console.log('Connection closed. Attempting to reconnect...');
                        await startConnection();
                    });

                    async function startConnection() {
                        try {
                            await connection.start();
                            await connection.invoke("JoinExamAdminGroup", examId);
                            console.log("SignalR Connected.");
                        } catch (err) {
                            console.log(err);
                            setTimeout(startConnection, 5000);
                        }
                    }

                    await startConnection();

                    const peerConnections = {};
                    const adminGrid = document.getElementById('adminGrid');

                    connection.on("ReceiveOffer", async (candidateId, offer) => {
                        console.log(`Received offer from ${candidateId}`);
                        if (peerConnections[candidateId]) return;

                        const pc = new RTCPeerConnection({
                            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
                        });
                        peerConnections[candidateId] = pc;

                        pc.addTransceiver('video', { direction: 'recvonly' });

                        pc.ontrack = e => {
                            console.log('Received track:', e.track.kind);
                            if (e.streams && e.streams.length > 0) {
                                attachStream(candidateId, e.streams[0]);    
                            }
                        };

                        pc.onicecandidate = e => {
                            if (e.candidate) {
                                connection.invoke("SendIceCandidate", candidateId, {
                                    candidate: e.candidate.candidate,
                                    sdpMid: e.candidate.sdpMid,
                                    sdpMLineIndex: e.candidate.sdpMLineIndex
                                }).catch(err => console.error('Error sending ICE candidate:', err));
                            }
                        };

                        try {
                            await pc.setRemoteDescription(offer);
                            const answer = await pc.createAnswer();
                            await pc.setLocalDescription(answer);
                            console.log("Sending answer.......", answer, candidateId)
                            await connection.invoke("SendAnswer", candidateId, answer);
                        } catch (err) {
                            console.error('Error handling offer:', err);
                        }
                    });

                    connection.on("ReceiveIceCandidate", (candidateData, candidateId) => {
                        const pc = peerConnections[candidateId];
                        console.log("Receive IC on  pc", pc)
                        if (!pc) return;

                        try {
                            const iceCandidate = new RTCIceCandidate({
                                candidate: candidateData.candidate,
                                sdpMid: candidateData.sdpMid,
                                sdpMLineIndex: candidateData.sdpMLineIndex
                            });
                            pc.addIceCandidate(iceCandidate)
                                .catch(err => console.error('Add ICE candidate error:', err));
                        } catch (err) {
                            console.error('Error creating ICE candidate:', err);
                            console.log('Problematic candidate data:', candidateData);
                        }
                    });

                    function attachStream(candidateId, stream) {
                        const video = document.createElement('video');
                        video.autoplay = true;
                        video.playsInline = true;
                        video.srcObject = stream;
                        video.muted = true;

                        const container = document.createElement('div');
                        container.dataset.candidate = candidateId;  // Important for alerts

                        container.className = 'stream-container col-md-4 col-sm-6 col-12'; // Responsive columns
                        container.innerHTML = `<div class="candidate-label">Candidate: ${candidateId}</div>`;

                        container.appendChild(video);

                        adminGrid.appendChild(container);

                        video.onloadedmetadata = () => {
                            video.play().catch(err => console.error("Video play error:", err));

                            // Start anomaly detection AFTER video starts playing
                            setupAnomalyDetection(video, candidateId).catch(err => {
                                console.error("Failed to initialize anomaly detection:", err);
                            });
                        };
                    }


                    async function setupAnomalyDetection(videoElement, candidateId) {
                        try {
                            // Load the model - NEW CORRECT WAY
                            const model = await blazeface.load();

                            // Detection function
                        async function detectAnomalies() {
                            if (videoElement.readyState < 2) return;

                            const predictions = await model.estimateFaces(videoElement, {
                                returnTensors: false,  // Ensure we get regular arrays, not tensors
                                flipHorizontal: false,
                                annotateBoxes: true
                            });

                            if (predictions.length > 0) {
                                const face = predictions[0];

                                // PROPER way to access landmarks
                                const landmarks = face.landmarks;

                                // Convert tensor to array if needed
                                const landmarksArray = Array.isArray(landmarks) ?
                                    landmarks :
                                    await landmarks.array();

                                // Now safely access points
                                const leftEye = landmarksArray[0];  // Left eye center [x,y]
                                const rightEye = landmarksArray[1]; // Right eye center [x,y]
                                const noseTip = landmarksArray[2];  // Nose tip [x,y]
                                const mouth = landmarksArray[3];    // Mouth center [x,y]
                                const leftEar = landmarksArray[4];  // Left ear tragion [x,y]
                                const rightEar = landmarksArray[5]; // Right ear tragion [x,y]

                                // Calculate head turn (improved method)
                                const eyeMidpoint = [
                                    (leftEye[0] + rightEye[0]) / 2,
                                    (leftEye[1] + rightEye[1]) / 2
                                ];

                                const noseOffset = noseTip[0] - eyeMidpoint[0];
                                const eyeDistance = Math.sqrt(
                                    Math.pow(rightEye[0] - leftEye[0], 2) +
                                    Math.pow(rightEye[1] - leftEye[1], 2)
                                );

                                // Normalized offset (-1 to 1)
                                const normalizedOffset = noseOffset / (eyeDistance * 0.5);

                                if (Math.abs(normalizedOffset) > 0.5) { // Threshold adjustment
                                    const direction = normalizedOffset > 0 ? "right" : "left";
                                    const severity = Math.min(100, Math.round(Math.abs(normalizedOffset) * 100));
                                    //Head turned ${direction} (${severity}%)
                                    notifyAdmin(candidateId, `Anomalies detected`);
                                }
                            }
                            requestAnimationFrame(detectAnomalies);
                    }
                            // Start detection when video plays
                            if (videoElement.readyState > 1) {
                                detectAnomalies();
                            } else {
                                videoElement.onplaying = detectAnomalies;
                            }

                        } catch (err) {
                            console.error("Anomaly detection failed:", err);
                            // Fallback: Periodically check if face is visible
                            const fallbackCheck = setInterval(() => {
                                if (videoElement.readyState > 1) {
                                    canvasContext.drawImage(videoElement, 0, 0, 1, 1);
                                    const pixelData = canvasContext.getImageData(0, 0, 1, 1).data;
                                    const brightness = (pixelData[0] + pixelData[1] + pixelData[2])/3;
                                    if (brightness < 10 || brightness > 245) { // Extreme values
                                        notifyAdmin(candidateId, "Possible camera obstruction");
                                    }
                                    clearInterval(fallbackCheck);
                                }
                            }, 1000);
                        }
                    }

                            function notifyAdmin(candidateId, message) {
            const container = document.querySelector(`[data-candidate="${candidateId}"]`);
            if (!container) return;

            // Sanitize the message for use in a selector
            const sanitizedMessage = message
                .replace(/[^a-zA-Z0-9-]/g, '-')  // Replace special chars with hyphens
                .replace(/-+/g, '-')             // Collapse multiple hyphens
                .replace(/^-|-$/g, '');          // Remove leading/trailing hyphens

            const alertId = `alert-${candidateId}-${sanitizedMessage}`.toLowerCase();

            // Check for existing alert
            const existingAlert = document.getElementById(alertId);
            if (existingAlert) {
                existingAlert.style.display = 'block';
                flashVideoBorder(container);
                return;
            }

            // Create new alert
            const alertDiv = document.createElement('div');
            alertDiv.id = alertId;
            alertDiv.className = 'alert alert-danger mt-2';
            alertDiv.innerHTML = `
                ALERT: ${message}
                <button type="button" class="btn-close float-end"
                        onclick="this.parentElement.style.display='none'">
                </button>
            `;

            container.appendChild(alertDiv);
            flashVideoBorder(container);
        }

        function flashVideoBorder(container) {
            const video = container.querySelector('video');
            if (!video) return;

            video.style.border = '4px solid red';
            setTimeout(() => {
                video.style.border = '4px solid lime';
            }, 2000);
        }
            
            
            } catch (err) {
                    console.error('Initialization error:', err);
                }
            })();
        });
    </script>

}